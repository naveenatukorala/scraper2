describe("attr",function(){it("should copy arrays",function(){var a=new function(){this.data=bit155.attr()},b=["hello","jello"];a.data(b);expect(a.data()).toEqual(["hello","jello"]);b.push("bellow");expect(a.data()).toEqual(["hello","jello"])});it("should set simple value",function(){var a=new function(){this.name=bit155.attr()};expect(a.name("dave")).toEqual(a);expect(a.name()).toEqual("dave")});it("should set array value",function(){var a=new function(){this.name=bit155.attr()};expect(a.name("dave",
"heaton")).toEqual(a);expect(a.name()).toEqual(["dave","heaton"])});it("should use initial value",function(){var a=new function(){this.name=bit155.attr({initial:"anne"})};expect(a.name()).toEqual("anne")});it("should not filter initial value",function(){var a=new function(){this.name=bit155.attr({initial:"anne",filter:function(a){return a.toUpperCase()}})};expect(a.name()).toEqual("anne")});it("filter should assign different value",function(){var a=new function(){this.name=bit155.attr({filter:function(a){return a.toUpperCase()}})};
expect(a.name("dave")).toEqual(a);expect(a.name()).toEqual("DAVE")});it("filter validator should throw error",function(){var a=new function(){this.name=bit155.attr({filter:function(a){if("string"!==typeof a)throw"Bad value";}})};expect(a.name("dave")).toEqual(a);expect(a.name()).toEqual("dave");expect(function(){a.name(42)}).toThrow("Bad value");expect(a.name()).toEqual("dave")});it("should invoke after callback",function(){var a,b=new function(){this.name=bit155.attr({callback:function(b){a=!0}})};
expect(b.name("dave")).toEqual(b);expect(a).toEqual(!0);expect(b.name()).toEqual("dave")});it("filter and callback should have access to object",function(){var a,b,c=new function(){this.name=bit155.attr({filter:function(b){a=this},callback:function(a){b=this}})};expect(c.name("dave")).toEqual(c);expect(a).toEqual(c);expect(b).toEqual(c);expect(c.name()).toEqual("dave")})});
